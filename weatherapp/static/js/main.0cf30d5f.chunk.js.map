{"version":3,"sources":["apikey.js","components/weather/Weather.js","components/form/Form.js","components/navbar/Navbar.js","components/home/Home.js","components/about/About.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","moment","require","Weather","this","props","city","temperature","description","icon","feelsLike","tempMin","tempMax","wind","humidity","dailyForecast","error","loading","className","color","src","alt","map","day","index","newDate","Date","weekday","dt","setTime","key","format","weather","Math","round","main","temp","temp_max","temp_min","Component","Form","getWeather","onSubmit","type","placeholder","name","Navbar","to","Home","state","e","a","preventDefault","target","elements","value","fetch","apiCallNow","json","responseNow","apiCall5Day","response5Day","cod","list","filter","reading","dt_txt","includes","dailyData","setState","feels_like","speed","console","log","About","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0cf30d5f.chunk.js","sourcesContent":["const config = { \n  apiKey : 'a6fd8fac5296457c5560e10d291c5785'\n}\n\nexport default {config}","import React, { Component } from 'react';\nimport \"./Weather.css\";\nimport { GiWaterDrop } from 'react-icons/gi';\nimport { FiWind } from 'react-icons/fi';\nimport { SyncLoader } from 'react-spinners';\nconst moment = require('moment');\n\nclass Weather extends Component {\n    render() {\n        const { \n            city, \n            temperature, \n            description, \n            icon,\n            feelsLike,\n            tempMin, \n            tempMax,\n            wind,\n            humidity,\n            dailyForecast,\n            error, \n            loading } = this.props;\n\n        return (\n            <div className=\"Weather\">\n                 { !error && !loading ?  \n                    <div className=\"weatherInfo\">\n                        <div className=\"weatherHeader\">\n                            <div>\n                                <img \n                                    src={\"https://openweathermap.org/img/wn/\" \n                                         + icon + \".png\"}\n                                    alt=\"weather icon\"\n                                />\n                                <h1>{city}</h1>\n                            </div>\n                            <div>\n                                <p>Now</p>\n                                <span></span>\n                                <p>{description}</p>\n                            </div>\n                            <div className=\"wind\">\n                                <FiWind/> \n                                <p>{wind}</p>\n                            </div>\n                            <div className=\"humid\">\n                                <GiWaterDrop/>\n                                <p>{humidity}</p>\n                            </div>\n                        </div> \n                        <div className=\"temperature\">\n                            <p className=\"temp\">{temperature}</p>\n                            <p>Feels like: {feelsLike}</p>\n                            <p>{tempMax} / {tempMin}</p>\n                        </div>\n                        <div className=\"dailyForecast\">\n                            {dailyForecast.map(function(day, index) {\n                                let newDate = new Date();\n                                const weekday = day.dt * 1000;\n                                newDate.setTime(weekday);\n\n                                return (\n                                    <div key={index}>\n                                        <h3>{moment(newDate).format('dddd')}</h3>\n                                        <p>{moment(newDate).format('MMMM DD')}</p>\n                                        <img \n                                            src={\"https://openweathermap.org/img/wn/\" \n                                                + day.weather[0].icon + \".png\"}\n                                            alt=\"weather icon\"\n                                        />\n                                        <p>{Math.round(day.main.temp) + \"°\"}</p>\n                                        <p>\n                                            {Math.round(day.main.temp_max) + \"°\"} / {Math.round(day.main.temp_min) + \"°\"}\n                                        </p>\n                                    </div>\n                                )                \n                            })}\n                        </div>\n                    </div>\n                :\n                    <div className=\"errorInfo\">\n                        {error && <p>{error}</p>}\n                        {loading && <SyncLoader className=\"loader\" loading={loading} color={\"#b07acd\"}/>}\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React, { Component } from 'react';\nimport \"./Form.css\";\n\nclass Form extends Component {\n    render() {\n        const { getWeather } = this.props;\n        return(\n            <div className=\"Form\">\n                <form onSubmit={getWeather}>\n                    <input type=\"text\" placeholder=\"enter a city\" name=\"city\"></input>\n                    <button>Search city</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport \"./Navbar.css\";\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <div className=\"Navbar\">\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">\n                                Home\n                            </Link>\n                        </li>\n                        <li>\n                            <Link to=\"/about\">\n                                About\n                            </Link>\n                        </li>\n                    </ul>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport apiKey from '../../apikey';\nimport Weather from '../weather/Weather';\nimport Form from '../form/Form';\nimport Navbar from '../navbar/Navbar';\n\n\nclass Home extends Component {\n  \n    state = {\n        error: null,\n        loading: true,\n        dailyForecast: []\n    };\n\n    async componentDidMount() {\n        try {\n          //API call weather right now \n          const apiCallNow = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=copenhagen&appid=${apiKey.config.apiKey}&units=metric`);\n          const responseNow = await apiCallNow.json();\n\n          //API call weather forecast 5 days\n          const apiCall5Day = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=copenhagen&appid=${apiKey.config.apiKey}&units=metric`);\n          const response5Day = await apiCall5Day.json();\n\n          //Filter the response to contain daily data for 5 days at 18:00\n          const dailyData = await response5Day.list.filter(reading => {   \n            return reading.dt_txt.includes(\"18:00:00\");\n          });\n\n          this.setState({ \n            loading: false,\n            city: \"Copenhagen\",\n            temperature: Math.round(responseNow.main.temp)+\"°\",\n            feelsLike: Math.round(responseNow.main.feels_like)+\"°\",\n            tempMin: Math.round(responseNow.main.temp_min)+\"°\",\n            tempMax: Math.round(responseNow.main.temp_max)+\"°\",\n            wind: Math.round(responseNow.wind.speed)+\" m/s\",\n            humidity: responseNow.main.humidity + \" %\",\n            description: responseNow.weather[0].description,\n            icon: responseNow.weather[0].icon,\n            dailyForecast: dailyData\n           });\n        } catch(error) {\n          console.log(error);\n        }\n      }\n\n      getWeather = async(e) => {\n        e.preventDefault();\n        \n        //Get city value from form\n        const city = e.target.elements.city.value;\n       \n        //API call weather right now\n        const apiCallNow = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey.config.apiKey}&units=metric`);\n        const responseNow = await apiCallNow.json();\n\n        //API call weather forecast 5 days\n        const apiCall5Day = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey.config.apiKey}&units=metric`);\n        const response5Day = await apiCall5Day.json();\n\n        //Check if city has been stated and the city exists\n        if (city && responseNow.cod !== \"404\") {  \n\n          //Filter the response to contain daily data for 5 days at 18:00\n          const dailyData = await response5Day.list.filter(reading => {   \n            return reading.dt_txt.includes(\"18:00:00\")\n          });\n\n          this.setState({\n            loading: false,\n            city: responseNow.name,\n            temperature: Math.round(responseNow.main.temp)+\"°\",\n            feelsLike: Math.round(responseNow.main.feels_like)+\"°\",\n            tempMin: Math.round(responseNow.main.temp_min)+\"°\",\n            tempMax: Math.round(responseNow.main.temp_max)+\"°\",\n            wind: Math.round(responseNow.wind.speed)+\" m/s\",\n            humidity: responseNow.main.humidity + \" %\",\n            description: responseNow.weather[0].description,\n            icon: responseNow.weather[0].icon,\n            dailyForecast: dailyData,\n            error:\"\"\n          });\n        } else {\n          this.setState({\n            error: \"Please enter a valid city\"\n          });\n        }\n      }\n\n    render() {\n        const { \n            city, \n            temperature,  \n            description, \n            icon,\n            feelsLike,\n            tempMax, \n            tempMin,\n            wind,\n            humidity,\n            dailyForecast,\n            error,\n            loading } = this.state;\n\n        return (\n            <div className=\"Home\">\n              <div className=\"header\">\n                <Navbar/>\n                <Form getWeather={this.getWeather}/>\n              </div>\n                <Weather \n                    loading={loading}\n                    city={city}\n                    temperature={temperature}\n                    description={description}\n                    icon={icon}\n                    feelsLike={feelsLike}\n                    tempMin={tempMin}\n                    tempMax={tempMax}\n                    wind={wind}\n                    humidity={humidity}\n                    dailyForecast={dailyForecast}\n                    error={error}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport Navbar from '../navbar/Navbar';\nimport Form from '../form/Form';\nimport \"./About.css\";\n\nclass About extends Component {\n    render() {\n        return(\n            <div className=\"About\">\n                <div className=\"header\">\n                    <Navbar/>\n                    <Form/>\n                </div>\n                <div className=\"container\">\n                    <div>\n                        <h1>About</h1>\n                        <p>\n                            A weather web app built using React, fetching weather-data from\n                            OpenWeatherMap API. \n                        </p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.css';\nimport Home from './components/home/Home';\nimport About from './components/about/About';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <main>\n            <Switch>\n              <Route exact path=\"/\" component={Home}/>\n              <Route exact path=\"/about\" component={About}/>\n            </Switch>\n          </main>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}